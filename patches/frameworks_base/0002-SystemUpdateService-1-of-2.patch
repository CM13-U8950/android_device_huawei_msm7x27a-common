From 083e32baa46481e3bb8e682bf9db8c8c469d2afd Mon Sep 17 00:00:00 2001
From: Kyle Harrison <khwebmail@gmail.com>
Date: Thu, 21 May 2015 14:11:47 +0100
Subject: [PATCH] SystemUpdateService: enable service but lock its receivers
 [1/2]

Added a check for ensure that disabled components are not
re-enabled at runtime

Added code for forcing enable of previously disabled components

Change-Id: I3a2d30d208e59c8bfb8d913a465eaa22d9d34d3d
---
 core/res/res/values/config.xml                     |  5 +++++
 core/res/res/values/slim_symbols.xml               |  1 +
 .../android/server/pm/PackageManagerService.java   | 26 ++++++++++++++++++++++
 3 files changed, 32 insertions(+)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index f78b88d..cab1483 100755
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -2260,4 +2260,9 @@
     <!-- The list of components which should be automatically disabled. -->
     <string-array name="config_disabledComponents" translatable="false">
     </string-array>
+
+    <!-- The list of components which should be forced to be enabled. -->
+    <string-array name="config_forceEnabledComponents" translatable="false">
+    </string-array>
+
 </resources>
diff --git a/core/res/res/values/slim_symbols.xml b/core/res/res/values/slim_symbols.xml
index bf0d1de..f84c511 100644
--- a/core/res/res/values/slim_symbols.xml
+++ b/core/res/res/values/slim_symbols.xml
@@ -120,5 +120,6 @@
 
   <!-- Package Manager -->
   <java-symbol type="array" name="config_disabledComponents" />
+  <java-symbol type="array" name="config_forceEnabledComponents" />
 
 </resources>
diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java
index f71a27f..f4d4e4c 100755
--- a/services/core/java/com/android/server/pm/PackageManagerService.java
+++ b/services/core/java/com/android/server/pm/PackageManagerService.java
@@ -497,6 +497,8 @@ public class PackageManagerService extends IPackageManager.Stub {
     ComponentName mCustomResolverComponentName;
 
     boolean mResolverReplaced = false;
+    
+    ArrayList<ComponentName> mDisabledComponentsList;
 
     private AppOpsManager mAppOps;
 
@@ -1814,9 +1816,11 @@ public class PackageManagerService extends IPackageManager.Stub {
             }
 
             // Disable components marked for disabling at build-time
+            mDisabledComponentsList = new ArrayList<ComponentName>();
             for (String name : mContext.getResources().getStringArray(
                     com.android.internal.R.array.config_disabledComponents)) {
                 ComponentName cn = ComponentName.unflattenFromString(name);
+                mDisabledComponentsList.add(cn);
                 Slog.v(TAG, "Disabling " + name);
                 String className = cn.getClassName();
                 PackageSetting pkgSetting = mSettings.mPackages.get(cn.getPackageName());
@@ -1828,6 +1832,21 @@ public class PackageManagerService extends IPackageManager.Stub {
                 pkgSetting.disableComponentLPw(className, UserHandle.USER_OWNER);
             }
 
+            // Enable components marked for forced-enable at build-time
+            for (String name : mContext.getResources().getStringArray(
+                    com.android.internal.R.array.config_forceEnabledComponents)) {
+                ComponentName cn = ComponentName.unflattenFromString(name);
+                Slog.v(TAG, "Enabling " + name);
+                String className = cn.getClassName();
+                PackageSetting pkgSetting = mSettings.mPackages.get(cn.getPackageName());
+                if (pkgSetting == null || pkgSetting.pkg == null
+                        || !pkgSetting.pkg.hasComponentClassName(className)) {
+                    Slog.w(TAG, "Unable to enable " + name);
+                    continue;
+                }
+                pkgSetting.enableComponentLPw(className, UserHandle.USER_OWNER);
+            }
+
             // If this is first boot after an OTA, and a normal boot, then
             // we need to clear code cache directories.
             mIsUpgrade = !Build.FINGERPRINT.equals(mSettings.mFingerprint);
@@ -12240,6 +12259,12 @@ public class PackageManagerService extends IPackageManager.Stub {
     public void setComponentEnabledSetting(ComponentName componentName,
             int newState, int flags, int userId) {
         if (!sUserManager.exists(userId)) return;
+        // Don't allow to enable components marked for disabling at build-time
+        if (mDisabledComponentsList.contains(componentName)) {
+            Slog.d(TAG, "Ignoring attempt to set enabled state of disabled component "
+                    + componentName.flattenToString());
+            return;
+        }
         setEnabledSetting(componentName.getPackageName(),
                 componentName.getClassName(), newState, flags, userId, null);
     }
@@ -12254,6 +12279,7 @@ public class PackageManagerService extends IPackageManager.Stub {
             throw new IllegalArgumentException("Invalid new component state: "
                     + newState);
         }
+
         PackageSetting pkgSetting;
         final int uid = Binder.getCallingUid();
         final int permission = mContext.checkCallingOrSelfPermission(
-- 
2.4.1

